version: 0.2
run-as: root

phases:

  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      - chmod +x eks_cicd/prereqs.sh
      - sh eks_cicd/prereqs.sh

  pre_build:
    commands:
      - echo Logging in to Amazon EKS...
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_CLUSTER_NAME
      - echo check config 
      - kubectl config view --minify
      - echo check kubectl access
      - kubectl get svc
      - echo Logging in to Docker Hub...
      - echo $DOCKER_PASSWORD | docker login --username $DOCKER_HUB_UNAME --password-stdin 
      - REPOSITORY_URI=$DOCKER_HUB_UNAME/$IMAGE_REPOSITORY_NAME
      - echo $REPOSITORY_URI
      - docker pull $REPOSITORY_URI:$IMAGE_TAG
      

  build:
    commands:
      - echo Build started on `date`
      - LOCAL_IMAGE_TAG=$IMAGE_REPOSITORY_NAME-$DEPLOYMENT_ENV:$IMAGE_TAG
      - echo local tag - $LOCAL_IMAGE_TAG
      - echo Building the Docker image...          
      - docker build --cache-from $REPOSITORY_URI:$IMAGE_TAG -t $LOCAL_IMAGE_TAG .
      - docker tag $LOCAL_IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG 

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Push the latest image to cluster
      - >-
        if [ "$DEPLOYMENT_ENV" = "prod" ]; then 
          BLUE_DEPLOYMENT_NAME="coursework-20200681-demo-blue";
          GREEN_DEPLOYMENT_NAME="coursework-20200681-demo-green";
          DEPLOYMENT_COLOR=$(kubectl get svc coursework-20200681-demo -o=jsonpath='{.spec.selector.app}' -n prod);
          if [ "$DEPLOYMENT_COLOR" = "$BLUE_DEPLOYMENT_NAME" ]; then TARGET="green"; else TARGET="blue"; fi;
          echo "Current deployment color - $DEPLOYMENT_COLOR";
          echo "Target deployment color - $TARGET";
          kubectl apply -f $DEPLOYMENT_ENV/deployment-$TARGET.yaml;
          kubectl rollout restart -f $DEPLOYMENT_ENV/deployment-$TARGET.yaml;
          kubectl apply -f $DEPLOYMENT_ENV/service-$TARGET.yaml;
        else
          kubectl apply -f $DEPLOYMENT_ENV/deployment.yaml;
          kubectl rollout restart -f $DEPLOYMENT_ENV/deployment.yaml;
        fi;




